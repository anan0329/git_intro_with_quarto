---
format: 
  revealjs:
    # smaller: true
    slide-number: true
    width: 1200
    height: 900
    theme: ["theme/custom.scss"]
    background-transition: fade
from: markdown+emoji
editor: source
---

##  {#TitleSlide data-menu-title="TitleSlide" background-color="#292929" background-image="images/git_nasil_kullanilir_straight.png" background-position="left 100px center" background-size="contain"}

::: {style="position: absolute; left: 640px; top: 200px; height: 525px; width: 760px; padding: 20px; padding-left: 50px;"}
[Version Conrtol with Git]{style="font-size: 70px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Brian Yang]{style="font-size: 60px; font-weight: bold;"}

[2022-08-25]{style="font-size: 50px;font-weight: bold;"}
:::


## What is version control?

::: {.incremental}
> From wikipedia: version control (also known as revision control, source control, or source code management) is a class of systems responsible for managing changes to computer programs, documents, large web sites, or other collections of information. Version control is a component of software configuration management

- Control **VERSION**

- A version control system is a software that helps you control / manage different versions of source code.
:::

. . .

- Two main types of VCS model:
  + centralized - all users connect to a central repository <img src="https://upload.wikimedia.org/wikipedia/commons/2/22/Apache_Subversion_logo.svg" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img>
  + distributed - each user has the entire repository on their machine <img src="https://miro.medium.com/max/766/1*co_1qORNdM0PI1nvCp7Iig.png" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Mercurial_no_border_logo.svg/800px-Mercurial_no_border_logo.svg.png" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img> 


## Setup

- Installing Git: Follow <https://git-scm.com/downloads>
  
- Once installed, run `git` on the command line to check if it displays the usage information.

. . . 

````{.bash code-line-numbers="|1|2-7|11|15|22|30|39"}
$ git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

````

## Setup

First time Git configuration

````{.bash }
# Tells Git your name
git config --global user.name "<Your-Name>"

# Tells Git your email
git config --global user.email "<Your-email-address>"

# Tells Git to display colorful outputs
git config --global color.ui auto

# code editor (optional)
# VSCode setup
git config --global core.editor "code --wait"

# check your configuration settings
git config --list
````

. . .

[Awesome, let's get started!]{.r-fit-text}


## File Workflow

![](images/git_workflow.png)


## Some common terms

| `Version Control System`
|      - Revert project back to a specific previous state
|      - See who last modified something that caused a problem ðŸ˜‡
|      - See who introduced an issue

| `Working Tree`
|      - The files in the computer's file system
|      - This is contrast to the files that have been saved (in commits)
|        in the repository


| `Staging Area(Index)`
|      - A file in the git directory that stores info about what will go into your
|        next commit
|      - Stores file content in [.git/object]{style="background-color: LightGray"}, updates index file, [.git/index]{style="background-color: LightGray"}


## Some common terms

| `Commit`
|      - snapshot
|      - Takes a picture of what all your files look like and stores a reference

| `SHA(SHA hash)`
|      - a 40-character ID number for each comit
|      - e.g. b48c24300bbad66d6b62ac146a50973cc1a3d0a2

| `Repository(Repo)`
|      - A directory that contains your project work, [**.git folder**]{style="background-color: LightGray"}
|      - Can exist locally or as a remote copy on another computer.

| `branch`
|      - When a new line of development is created that diverges of the main
|        line of development.
|      - This alternative line of development can continue without altering
|        the main line

## Create a git repo

Before making any commits or do anything else, the repository needs to actually exist.

````{.bash }
$ git init
Initialized empty Git repository in C:/Users/Brian/Documents/git_intro_with_quarto/.git/

````

`git init` command sets up all the necessary files that git will use to keep track of everything. All of these file are stored in a hidden directory called [.git]{style="background-color: LightGray"}, which is th `repo`

![](images/git_init.png)


## Clone a git repo

You found a interesting repo and want to further dive into it, then you make an identical copy to your computer.

![](images/github_clone.png)

````{.bash }
$ git clone https://github.com/anan0329/git_intro_with_quarto.git
Cloning into 'git_intro_with_quarto'...
remote: Enumerating objects: 134, done.
remote: Counting objects: 100% (134/134), done.
remote: Compressing objects: 100% (107/107), done.
remote: Total 134 (delta 21), reused 133 (delta 20), pack-reused 0
Receiving objects: 100% (134/134), 2.13 MiB | 744.00 KiB/s, done.
Resolving deltas: 100% (21/21), done.

````

## Check a repo's status

Everytime you works with a project, you should first check the status using `git status`

- When starting a project with no files...
````{.bash }
$ git status
On branch master
No commits yet
nothing to commit (create/copy files and use "git add" to track)

````
1. [On branch main]{style="background-color: LightGray"} - means that Git is on the main(default) branch
2. [nothing to commit]{style="background-color: LightGray"} - means that there are no pending changes

- When cd to a cloned repo...
````{.bash }
$ git status
On branch main
Your branch is up to date with 'origin/main'.
nothing to commit, working tree clean

````
3. [Your branch is up to date with 'origin/main'.]{style="background-color: LightGray"} - means that the project is in sync with the one we cloned from.


## Check a repo's status

- When working along with a project...
````{.bash}
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git_intro.qmd

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        images/github_clone.png

no changes added to commit (use "git add" and/or "git commit -a")

````

<br></br>

We will cover these new terms later.


## Display a repo's comments

After making several commits, or cloning a repository, you'll probably want to look back to see what has happened using `git log`. 

````{.bash code-line-numbers="|2-6|2|6"}
$ git log
commit 890fde39e7ac039a9b585a9e50bb459f0a176b89 (HEAD -> main, origin/main, origin/HEAD)
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Thu Aug 25 11:23:30 2022 +0800

    add git init description

commit 154a025c63dff3968ab6a6776fe7a4c89a861311
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Thu Aug 25 10:47:39 2022 +0800

    add empty readme file

...

commit 6a420fbc969f587a3ff76bbcd74947f59c259b8b
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Sat Aug 20 22:45:10 2022 +0800

    initial commit

    create some folder & files

````

- SHA - 890fde39e7ac039a9b585a9e50bb459f0a176b89
- HEAD - the pointer to the current branch reference
- commit message - add git init description

## Display a repo's comments

You can also alter how Git displays the repo's information.

. . .

::: {.panel-tabset}

### oneline

- `--oneline` flag only outputs first 7 SHA, head, and commit messages
````{.bash}
$ git log --oneline
890fde3 (HEAD -> main, origin/main) add git init description
154a025 add empty readme file
f1c762a make workflow page & common terms explanation
232d6ef Demonstrate commit changes
a6aa8ad version control & setup
ccd721a format title page with image
b48c243 set theme format
1f66364 set format & add title page
6a420fb initial commit

````

### statistics

- `--stat` flag displays the files that have been changed in the commit, also the number of lines that have been added / deleted
````{.bash}
commit ccd721a1b0cc2c839b93effc398c131d3ef0b8cc
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Sun Aug 21 01:11:15 2022 +0800

    format title page with image

 git_intro.html                                      |   6 ++++--
 git_intro.qmd                                       |   5 ++++-
 git_intro_files/libs/revealjs/dist/theme/quarto.css |   4 ++--
 images/git_nasil_kullanilir_straight.png            | Bin 0 -> 35824 bytes
 4 files changed, 10 insertions(+), 5 deletions(-)

commit b48c24300bbad66d6b62ac146a50973cc1a3d0a2
...
````

### patch

- `-p` flag displays the actual changes made to a file
````{.bash code-line-numbers="|7|8|9|10|11|12-26"}
commit 232d6ef8a37e957395b0b82b183d2e868fe910cc
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Sun Aug 21 20:41:04 2022 +0800

    Demonstrate commit changes

diff --git a/git_intro.qmd b/git_intro.qmd
index 84b4716..4ec5ff6 100644
--- a/git_intro.qmd
+++ b/git_intro.qmd
@@ -30,11 +30,14 @@ editor: source
 - Control **VERSION**

 - A version control system is a software that helps you control / manage different versions of source code.
+:::
+
+. . .

 - Two main types of VCS model:
   + centralized - all users connect to a central repository <img src="https://upload.wikimedia.org/wikipedia/commons/2/22/Apache_Subversion_logo.svg" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img>
   + distributed - each user has the entire repository on their machine <img src="https://miro.medium.com/max/766/1*co_1qORNdM0PI1nvCp7Iig.png" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Mercurial_no_border_logo.svg/800px-Mercurial_no_border_logo.svg.png" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img>
-:::
+


 ## Setup

...
````

- `git show` does the same thing

### format

- `--pretty` option changes output format. Some of the arguments are [oneline]{style="background-color: LightGray"}, [short]{style="background-color: LightGray"}, [full]{style="background-color: LightGray"}, and [fuller]{style="background-color: LightGray"}

````{.bash}
$ git log --pretty=format:"%h - %an, %ar : %s"
890fde3 - Brian Yang, 4 hours ago : add git init description
154a025 - Brian Yang, 4 hours ago : add empty readme file
f1c762a - Brian Yang, 5 hours ago : make workflow page & common terms explanation
232d6ef - Brian Yang, 4 days ago : Demonstrate commit changes
a6aa8ad - Brian Yang, 4 days ago : version control & setup
ccd721a - Brian Yang, 5 days ago : format title page with image
b48c243 - Brian Yang, 5 days ago : set theme format
1f66364 - Brian Yang, 5 days ago : set format & add title page
6a420fb - Brian Yang, 5 days ago : initial commit

````

### limit

- Time limiting options such as `--since` and `--until` with lots of formats, such as [2.weeks]{style="background-color: LightGray"}, ["2022-8-25"]{style="background-color: LightGray"}, [2 years 1 day 3 minutes ago]{style="background-color: LightGray"}

````{.bash}
$ git log --since=10.hours
commit 890fde39e7ac039a9b585a9e50bb459f0a176b89 (HEAD -> main, origin/main)
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Thu Aug 25 11:23:30 2022 +0800

    add git init description

commit 154a025c63dff3968ab6a6776fe7a4c89a861311
Author: Brian Yang <anan0329@yahoo.com.tw>
Date:   Thu Aug 25 10:47:39 2022 +0800

    add empty readme file

````

:::


## Add files to a repo

So, we've seen a lot commands to keep track of a Git repo. Now its time to add something to commit.

1. Clean repo
````{.bash}
$ git status
On branch main
Your branch is up to date with 'origin/main'.
nothing to commit, working tree clean
````

2. Add a html file of "hello world", a empty src folder
````{.bash}
$ echo "hello world" > add_something.html
$ git status
...
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        add_something.html
        src/

nothing added to commit but untracked files present (use "git add" to track)

````
- [Untracked files]{style="background-color: LightGray"} says there are two untracked files in the working tree.
- `git add` is used to move files from working tree to staging area

## Add files to a repo

3. Use `git add` to add files to stagin area. You can add all files once using `git add .` (be careful) 

```{.bash}
$ git add add_something.html
$ git status
...
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   add_something.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        src/
```

- [Changes to be committed]{style="background-color: LightGray"} displays files that are in the [staging area]{style="background-color: LightGray"}
- If we make a commit right now, only the *add_something.html* would be committed since it is tracked.

:::{.callout-tip}
## Tip

**(use "git restore --staged ..." to unstage)** if you accidently ran [git add]{style="background-color: LightGray"} and gave it the wrong file.

:::

## Commit files to a repo

To make a commit in Git, use `git commit -m <Your comment>` command.

````{.bash}
$ git commit -m "Initial commit"
[main cca3428] Initial commit
 2 files changed, 2 insertions(+)
 create mode 100644 add_something.html
 create mode 100644 src/myfun.py

````

If setted code editor before, running [git commit]{style="background-color: LightGray"} will pop up something like this in your editor. Type some text, save it, and close the editor window also do the work.

![](images/git_commit.png)


## Commit files to a repo

Lets see the git status.

````{.bash}
$ git status
On branch master
nothing to commit, working tree clean
````

<br></br>
If above steps are done under a cloned repo, you shall see these.

````{.bash}
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
````
:::{.callout-tip}
## Tip

**(use "git push" to publish your local commits)** indicates what you should do to push your works to the remote repository.

:::

## Good commit messages

> *How do I write a good commit message?*

**DO**

|     - do keep the message short
|     - do explain *what* the commit does

**Do not**

|     - do not explain *why* or *how* the changes are made
|     - do not use the word "and", break the changes into separate columns.


## Is the following commit message good?

:::{.callout-note appearance="simple"}
## Commit - Update the footer to copyright information
:::
. . . 

> Yes, the commit is short. It explains what but not how or why

. . .

:::{.callout-note appearance="simple"}
## Commit - Add a tag to the body
:::
. . . 

> No, the commit should not contain specifics on how the change was made. This information can be found by running [git log -p]{style="background-color: LightGray"}

. . .

:::{.callout-note appearance="simple"}
## Commit - Add changes to text.txt
:::
. . . 

> No, saying the changes have been made is not helpful. Saying *what* has changed (new content, content being removed, content being altered) to "text.txt"


## Find what changes were made

Imagine a situation. You start working on the next feature to a fantastic project at night, but then go to bed before you actually finish. When you start working the next day, there are uncommitted changes.

- `git status` will tell us what files have been changed, but not those changes actually were.
- `git log` won't help at this time since the changes aren't committed yet.

. . .

> The `git diff` command is used to find out this information.

. . .

````{.bash}
$ echo "origin" > sample.txt # origin
$ git add sample.txt
$ sed -i 's/origin/modified/' sample.txt # modified
$ git diff
diff --git a/sample.txt b/sample.txt
index 6092425..2e09960 100644
--- a/sample.txt
+++ b/sample.txt
@@ -1 +1 @@
-origin
+modified
````

## Some file to be ignored

- A gitignore file specifies intentionally untracked files that Git should ignore, such as S3 bucket access key, .Rhistory, and \__pycache__/
- Files already tracked by Git are not affected.
- [A collection of .gitignore templates](https://github.com/github/gitignore) 

````{.bash code-line-numbers="|2,14-16|20|32-34"}
$ ls -A
.git/ git_intro.html git_intro.qmd git_intro_files/ images/ powerpoint.pptx readme.md theme/

$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git_intro.html
        modified:   git_intro.qmd

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        powerpoint.pptx

no changes added to commit (use "git add" and/or "git commit -a")

$ echo "powerpoint.pptx" > .gitignore

$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git_intro.html
        modified:   git_intro.qmd

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore

no changes added to commit (use "git add" and/or "git commit -a")

````

## Multiple files to be ignored

> What if there are plenty of files to ignore?

<!-- . . . -->

> Globbing is what you need!

Some useful wildcards:

- [*]{style="background-color: LightGray"}  matches 0 or more characters, 
  + [images/*.jpg]{style="background-color: LightGray"} matches jpg files in images folder
- [?]{style="background-color: LightGray"}  matches 1 character
- [[abc]]{style="background-color: LightGray"}  matches a, b, _or_ c
- [**]{style="background-color: LightGray"}  matches nested directories.
  + [a/**/z]{style="background-color: LightGray"} matches [a/z]{style="background-color: LightGray"}, [a/b/z]{style="background-color: LightGray"}, [a/b/c/z]{style="background-color: LightGray"}