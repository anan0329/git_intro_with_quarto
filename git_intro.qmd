---
format: 
  revealjs:
    slide-number: true
    width: 1200
    height: 900
    theme: ["theme/custom.scss"]
    background-transition: fade
editor: source
---

##  {#TitleSlide data-menu-title="TitleSlide" background-color="#292929" background-image="images/git_nasil_kullanilir_straight.png" background-position="left 100px center" background-size="contain"}

::: {style="position: absolute; left: 640px; top: 200px; height: 525px; width: 760px; padding: 20px; padding-left: 50px;"}
[Version Conrtol with Git]{style="font-size: 70px; font-weight: bold; line-height: 1em; margin: 0px"}

<br>

[Brian Yang]{style="font-size: 60px; font-weight: bold;"}

[2022-08-25]{style="font-size: 50px;font-weight: bold;"}
:::


## What is version control?

::: {.incremental}
> From wikipedia: version control (also known as revision control, source control, or source code management) is a class of systems responsible for managing changes to computer programs, documents, large web sites, or other collections of information. Version control is a component of software configuration management

- Control **VERSION**

- A version control system is a software that helps you control / manage different versions of source code.

- Two main types of VCS model:
  + centralized - all users connect to a central repository <img src="https://upload.wikimedia.org/wikipedia/commons/2/22/Apache_Subversion_logo.svg" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img>
  + distributed - each user has the entire repository on their machine <img src="https://miro.medium.com/max/766/1*co_1qORNdM0PI1nvCp7Iig.png" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Mercurial_no_border_logo.svg/800px-Mercurial_no_border_logo.svg.png" style="display: inline-block; margin: 0; margin-bottom: -2px; height: 35px;"/></img> 
:::

## Setup

- Installing Git: Follow <https://git-scm.com/downloads>
  
- Once installed, run `git` on the command line to check if it displays the usage information.

. . . 

````{.bash code-line-numbers="1|2-7|11|15|22|30|39"}
$ git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

````

## Setup

First time Git configuration

````{.bash }
# Tells Git your name
git config --global user.name "<Your-Name>"

# Tells Git your email
git config --global user.email "<Your-email-address>"

# Tells Git to display colorful outputs
git config --global color.ui auto

# code editor (optional)
# VSCode setup
git config --global core.editor "code --wait"

# check your configuration settings
git config --list
````

. . .

[Awesome, let's get started!]{.r-fit-text}